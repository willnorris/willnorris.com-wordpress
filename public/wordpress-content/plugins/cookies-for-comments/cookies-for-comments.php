<?php
/*
Plugin Name: Cookies for Comments
Plugin URI: http://ocaoimh.ie/cookies-for-comments/
Description: Sets a cookie that must exist for a comment to be allowed through
Version: 0.5.1
Author: Donncha O Caoimh
Author URI: http://ocaoimh.ie/

CHANGES
2009-02-18 - Store cfc key in sitemeta on WordPress MU sites
2008-08-23 - Add a random key to the css file url.
2008-08-21 - Set the cookie for a week
2008-07-15 - User can delete spam comments now, http://wordpress.org/support/topic/187810?replies=2
             Check that Akismet functions exist.
2008-07-07 - Make it work in sub directories too.
             Mark spam comments with a "Blocked by CFC" message.
2008-03-06 - First release
*/

function cfc_stylesheet_html() {
	$cfc_key = get_cfc_key();

	if ( $cfc_key == '' )
		return false;

	?><link rel="stylesheet" href="<?php echo trailingslashit( get_option( 'siteurl' ) ) . $cfc_key . '.css?t=' . mt_rand(); ?>" type="text/css" media="screen" /><?php
}
add_action( 'wp_head', 'cfc_stylesheet_html' );

function get_cfc_key() {
	if( function_exists( 'get_site_option' ) ) {
		$cfc_key = get_site_option( 'cfc_key' );
	} else {
		$cfc_key = get_option( 'cfc_key' );
	}
	if( !$cfc_key ) {
		if( current_user_can('edit_plugins') ) {
			$cfc_key = md5( time() );
			if( function_exists( 'add_site_option' ) ) {
				$cfc_key = add_site_option( 'cfc_key', $cfc_key );
			} else {
				$cfc_key = add_option( 'cfc_key', $cfc_key );
			}
		} else {
			return;
		}
	}
	return $cfc_key;
}

function cfc_set_comment_style_cookie() {
	$cfc_key = get_cfc_key();
	if( !$cfc_key )
		return;

	if( strpos( $_SERVER[ 'REQUEST_URI' ], $cfc_key . '.css' ) ) {
                if( !isset( $_COOKIE[ $cfc_key ] ) )
                        @setcookie( $cfc_key, 1, time()+604800, '/' );
                header("Content-type: text/css");
		echo "/* Page generated by Cookies for Comments at http://ocaoimh.ie/cookies-for-comments/ */";
		define( 'DONOTCACHEPAGE', 1 ); // don't let wp-super-cache cache this page.
		die();
	}
	if( function_exists( 'akismet_auto_check_comment' ) ) {
		remove_filter( 'preprocess_comment', 'akismet_auto_check_comment', 1 );
		add_filter( 'preprocess_comment', 'akismet_auto_check_comment', 10 );
	}
}
add_action( 'init', 'cfc_set_comment_style_cookie' );

function cfc_check_comment_style_cookie( $comment ) {
	$cfc_key = get_cfc_key();
	if( !$cfc_key )
		return $comment;

	if( $comment[ 'comment_type' ] != 'trackback' && $comment[ 'comment_type' ] != 'pingback' && !isset( $_COOKIE[ $cfc_key ] ) ) {
		if( get_option( 'cfc_spam' ) == 'delete' ) {
			wp_die( 'Sorry, your comment has not been accepted.' );
		} else {
			add_filter('pre_comment_approved', create_function('$a', 'return \'spam\';')); // thanks Akismet
		}
		if( function_exists( 'akismet_auto_check_comment' ) )
			remove_filter( 'preprocess_comment', 'akismet_auto_check_comment', 10 ); // remove Akismet, comment is spam!
		$comment[ 'comment_author' ] = '[Blocked by CFC] ' . $comment[ 'comment_author' ];
	}
	return $comment;
}
add_filter('preprocess_comment', 'cfc_check_comment_style_cookie', 1);

function cfc_config_page() {
	add_options_page('Cookies for Comments', 'Cookies for Comments', 'manage_options', 'cfc_config', 'cfc_conf');
}
add_action('admin_menu', 'cfc_config_page');

function cfc_conf() {
	if ( isset($_POST['submit']) ) {
		if ( function_exists('current_user_can') && !current_user_can('manage_options') )
			die(__('Cheatin&#8217; uh?'));

		check_admin_referer( 'cfc' );
		if( $_POST[ 'cfc_spam' ] == 'spam' || $_POST[ 'cfc_spam' ] == 'delete' ) {
			update_option( 'cfc_spam', $_POST[ 'cfc_spam' ] );
		}
	}
	if( !get_option( 'cfc_spam' ) )
		update_option( 'cfc_spam', 'spam' );

	if ( !empty($_POST ) ) { ?>
		<div id="message" class="updated fade"><p><strong><?php _e('Options saved.') ?></strong></p></div>
	<?php } ?>
<div class="wrap">
<h2><?php _e('Comments for Cookies Configuration'); ?></h2>
<div class="narrow">
<form action="" method="post" id="cfc-conf" style="margin: auto; width: 400px; ">
<?php wp_nonce_field('cfc') ?>
<label><h3>What should happen to comments caught by CFC?</h3> <select name='cfc_spam'><option value='delete' <?php echo ( get_option( 'cfc_spam' ) == 'delete' ? 'selected' : '' ); ?> /> Delete <option value='spam' <?php echo ( get_option( 'cfc_spam' ) == 'spam' ? 'selected' : '' ); ?> /> Spam</select></label>
<input type='submit' name='submit' value='Save Options' />
</form>
<?php
$cfc_key = get_cfc_key();
if( $cfc_key ) { ?>
<p>If you're feeling adventerous, you can add the following two lines <em>before</em> the regular WordPress mod_rewrite rules in your <tt>.htaccess</tt> file. They will stop comments from spambots before they reach the database or are executed in PHP:</p>
<pre>
RewriteCond %{HTTP_COOKIE} !^.*<?php echo $cfc_key; ?>.*$
RewriteRule ^wp-comments-post.php - [F,L]
</pre>
<?php 
}
global $wpmu_version;
if ( isset( $wpmu_version ) && $wpmu_version != '' ) {
	?><p>As you're using WordPress MU, copy these lines into your .htaccess file, making sure the paths match the location of the signup form.</p>
<pre>
RewriteCond %{HTTP_COOKIE} !^.*<?php echo $cfc_key; ?>.*$
RewriteRule ^wp-signup.php - [F,L]
</pre>
	<?php
}
?>
</div>
</div>
<?php
}

function cfc_plugin_actions( $links, $file ) {
	if( $file == 'cookies-for-comments/cookies-for-comments.php' && function_exists( "admin_url" ) ) {
		$settings_link = '<a href="' . admin_url( 'options-general.php?page=cfc_config' ) . '">' . __('Settings') . '</a>';
		array_unshift( $links, $settings_link ); // before other links
	}
	return $links;
}
add_filter( 'plugin_action_links', 'cfc_plugin_actions', 10, 2 );
?>
